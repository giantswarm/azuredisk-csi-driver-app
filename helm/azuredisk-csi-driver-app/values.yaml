name: azuredisk-csi
serviceType: managed

image:
  baseRepo: gsoci.azurecr.io/giantswarm/
  azuredisk:
    repository: azuredisk-csi
    tag: v1.31.11
    pullPolicy: IfNotPresent
  csiProvisioner:
    repository: csi-provisioner
    tag: v5.2.0
    pullPolicy: IfNotPresent
  csiAttacher:
    repository: csi-attacher
    tag: v4.8.1
    pullPolicy: IfNotPresent
  csiResizer:
    repository: csi-resizer
    tag: v1.13.2
    pullPolicy: IfNotPresent
  livenessProbe:
    repository: livenessprobe
    tag: v2.15.0
    pullPolicy: IfNotPresent
  nodeDriverRegistrar:
    repository: csi-node-driver-registrar
    tag: v2.13.0
    pullPolicy: IfNotPresent

serviceAccount:
  create: true  # When true, service accounts will be created for you. Set to false if you want to use your own.
  controller: csi-azuredisk-controller-sa  # Name of Service Account to be created or used
  node: csi-azuredisk-node-sa  # Name of Service Account to be created or used
  snapshotController: csi-snapshot-controller-sa  # Name of Service Account to be created or used

rbac:
  create: true
  name: azuredisk

controller:
  name: csi-azuredisk-controller
  cloudConfigSecretName: azure-cloud-provider
  cloudConfigSecretNamespace: kube-system
  allowEmptyCloudConfig: false
  enableTrafficManager: false
  trafficManagerPort: 7788
  replicas: 2
  metricsPort: 29604
  livenessProbe:
    healthPort: 29602
  runOnMaster: false
  runOnControlPlane: false
  disableAvailabilitySetNodes: false
  vmType: ""
  provisionerWorkerThreads: 100
  attacherWorkerThreads: 1000
  vmssCacheTTLInSeconds: -1
  logLevel: 5
  extraArgs: []
  otelTracing:
    enabled: false
    otelServiceName: csi-azuredisk-controller
    otelExporterEndpoint: "http://localhost:4317"
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/controlplane"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "CriticalAddonsOnly"
      operator: "Exists"
      effect: "NoSchedule"
  hostNetwork: true  # this setting could be disabled if controller does not depend on MSI setting
  labels: {}
  annotations: {}
  podLabels: {}
  verticalPodAutoscaler:
    enabled: true
  podAnnotations: {}
  nodeSelector: {}
  affinity: {}
  resources:
    csiProvisioner:
      limits:
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi
    csiAttacher:
      limits:
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi
    csiResizer:
      limits:
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi
    csiSnapshotter:
      limits:
        memory: 400Mi
      requests:
        cpu: 10m
        memory: 20Mi
    livenessProbe:
      limits:
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 20Mi
    azuredisk:
      limits:
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi

node:
  cloudConfigSecretName: azure-cloud-provider
  cloudConfigSecretNamespace: kube-system
  # reserved data disk slot number per node, driver.volumeAttachLimit must be < 0
  reservedDataDiskSlotNum: 0
  supportZone: false
  allowEmptyCloudConfig: true
  getNodeIDFromIMDS: false
  maxUnavailable: 1
  metricsPort: 29605
  logLevel: 5
  livenessProbe:
    healthPort: 29603

snapshot:
  enabled: true
  name: csi-snapshot-controller
  image:
    csiSnapshotter:
      repository: csi-snapshotter
      tag: v8.2.0
      pullPolicy: IfNotPresent
    csiSnapshotController:
      repository: snapshot-controller
      tag: v8.2.0
      pullPolicy: IfNotPresent
  verticalPodAutoscaler:
    enabled: true
  snapshotController:
    name: csi-snapshot-controller
    replicas: 2
    labels: {}
    annotations: {}
    podLabels: {}
    podAnnotations: {}
    resources:
      limits:
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi
  VolumeSnapshotClass:
    enabled: false
    name: csi-azuredisk-vsc
    deletionPolicy: Delete
    parameters:
      incremental: '"true"'  # available values: "true", "false" ("true" by default for Azure Public Cloud, and "false" by default for Azure Stack Cloud)
      resourceGroup: ""  # available values: EXISTING RESOURCE GROUP (If not specified, snapshot will be stored in the same resource group as source Azure disk)
      tags: ""  # tag format: 'key1=val1,key2=val2'
    additionalLabels: {}

feature:
  enableFSGroupPolicy: true

driver:
  name: disk.csi.azure.com
  # maximum number of attachable volumes per node,
  # maximum number is defined according to node instance type by default(-1)
  volumeAttachLimit: -1
  customUserAgent: ""
  userAgentSuffix: "giantswarm"
  azureGoSDKLogLevel: ""  # available values: ""(no logs), DEBUG, INFO, WARNING, ERROR

linux:
  enabled: true
  dsName: csi-azuredisk-node  # daemonset name
  azure_credential_file: /etc/kubernetes/azure.yaml
  kubelet: /var/lib/kubelet
  distro: flatcar  # available values: debian, fedora
  enablePerfOptimization: true
  enableRegistrationProbe: true
  otelTracing:
    enabled: false
    otelServiceName: csi-azuredisk-node
    otelExporterEndpoint: "http://localhost:4317"
  tolerations:
    - operator: "Exists"
  hostNetwork: true  # this setting could be disabled if perfProfile is `none`
  getNodeInfoFromLabels: false  # get node info from node labels instead of IMDS
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  affinity: {}
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: type
              operator: NotIn
              values:
                - virtual-kubelet
  verticalPodAutoscaler:
    enabled: true
  resources:
    livenessProbe:
      limits:
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 20Mi
    nodeDriverRegistrar:
      limits:
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 20Mi
    azuredisk:
      limits:
        memory: 1000Mi
      requests:
        cpu: 10m
        memory: 20Mi

cloud: AzurePublicCloud

# set the HTTP_PROXY, HTTPS_PROXY and NO_PROXY variable
proxy:
  noProxy:
  http:
  https:
cluster:
  # is getting overwritten by the top level proxy if set
  # These values are generated via cluster-apps-operator
  proxy:
    noProxy:
    http:
    https:

## Reference to one or more secrets to be used when pulling images
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []
# - name: "image-pull-secret"

workloadIdentity:
  clientID: ""
  # [optional] If the AAD application or user-assigned managed identity is not in the same tenant as the cluster
  # then set tenantID with the application or user-assigned managed identity tenant ID
  tenantID: ""

azureCredentialFileConfigMap: azure-cred-file

test:
  image:
    name: giantswarm/alpine-testing
    tag: 0.1.1

podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# Add seccomp to container security context
securityContext:
  default:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
      - ALL
  node:
    seccompProfile:
      type: RuntimeDefault

global:
  podSecurityStandards:
    enforced: false
